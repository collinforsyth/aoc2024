package main

import (
	"collinforsyth/aoc2024/util"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestPart1Sample(t *testing.T) {
	input := []byte(`............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`)

	parsed := util.FromBytes(input).Runes()
	assert.Equal(t, 14, partOne(parsed))
}

func TestPart2Sample(t *testing.T) {
	input := []byte(`............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`)

	parsed := util.FromBytes(input).Runes()
	assert.Equal(t, 34, partTwo(parsed))
}

func Test_antinode(t *testing.T) {
	testCases := []struct {
		p1 point
		p2 point
		a1 point
		a2 point
	}{
		{p1: point{0, 0}, p2: point{2, 2}, a1: point{-2, -2}, a2: point{4, 4}},
		{p1: point{2, 2}, p2: point{0, 0}, a1: point{4, 4}, a2: point{-2, -2}},
		{p1: point{0, 2}, p2: point{2, 0}, a1: point{-2, 4}, a2: point{4, -2}},
		{p1: point{2, 0}, p2: point{0, 2}, a1: point{4, -2}, a2: point{-2, 4}},
	}

	// ,,,,,X
	// ,,,,,
	// ..X.
	// ....
	// X...
	// ....
	//
	for _, tc := range testCases {
		a1, a2 := antinodes(tc.p1, tc.p2, distance(tc.p1, tc.p2))
		assert.Equal(t, tc.a1, a1)
		assert.Equal(t, tc.a2, a2)
	}
}
